{"version":3,"sources":["assets/blackWhite-logo.png","Preloader.js","Components/Results.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Preloader","className","class","Results","id","this","props","genreTitle","userSelectedEvent","event","map","key","name","_embedded","venues","dates","start","localDate","localTime","src","images","url","alt","target","href","console","log","onClick","scrollToTop","Component","Footer","App","handleSelectGenreChange","selectedOptions","text","setState","genreSelection","value","selectedGenreTitle","handleFormSubmit","preventDefault","isLoading","axios","method","dataResponse","params","apikey","format","city","sort","classificationName","genreId","state","then","response","data","events","scroller","scrollTo","smooth","duration","filteredGenreResult","musicGenreResults","require","action","htmlFor","onChange","type","undefined","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79657d12.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blackWhite-logo.f1f414da.png\";","import React from 'react';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"preloaderContainer\">\r\n            <h2>Fetching Events</h2>\r\n            <span>\r\n                <i class=\"preloader fas fa-music\"></i>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React, {Component} from 'react';\r\n\r\n\r\nclass Results extends Component {\r\nconstructor() {\r\n    super();\r\n\r\n}\r\n\r\nrender() {\r\n\treturn (\r\n\t\t<main id=\"main\">\r\n\t\t<div className=\"genreBackground\">\r\n\t\t\t<h1 className=\"genreTitle\">{this.props.genreTitle === \"\" ? \"Random Genre\" : `ðŸŽµ T.O. ${this.props.genreTitle} ResultsðŸŽµ`}</h1>\r\n\t\t</div>\r\n\t\t\t\t<ul className=\"flexContainer wrapper\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.props.userSelectedEvent ? this.props.event.map(event => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<li key={event.id}className=\"resultContainer\">\r\n\t\t\t\t\t\t\t\t<h2 className=\"eventTitle\">{event.name}</h2>\r\n\t\t\t\t\t\t\t\t<h3 className=\"eventVenue\">{event._embedded.venues[0].name}</h3>\r\n\t\t\t\t\t\t\t\t<h3 className=\"eventDate\">{event.dates.start.localDate}</h3>\r\n\t\t\t\t\t\t\t\t<h3 className=\"eventTime\">{event.dates.start.localTime}</h3>\r\n\t\t\t\t\t\t\t\t<div className=\"imgContainer\">\r\n\t\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\tclassName=\"eventImg\"\r\n\t\t\t\t\t\t\t\t\tsrc={event.images[4].url}\r\n\t\t\t\t\t\t\t\t\talt={event.name}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<a className=\"ticketLink\" target=\"_blank\" href={event.url}>Buy Tickets</a>\r\n\t\t\t\t\t\t\t\t{/* <a href=\"\">{event._embedded.attractions[0].name}</a>  look at this for help cue*/}\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t);\t\r\n\t\t\t\t\t\t}) : console.log('nothing')  \r\n\t\t\t\t\t}\r\n\t\t\t\t</ul>\r\n\t\t\t\t<button className=\"scrollToTopBtn\" onClick={this.props.scrollToTop}>\r\n\t\t\t\t\t<i className=\"far fa-arrow-alt-circle-up\"></i>\r\n\t\t\t\t\t<p>scroll to top</p>\r\n\t\t\t\t</button>\r\n\t\t\t</main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Results;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className = \"footer wrapper\">\r\n                <p>Created by Brandon Tang. Juno College 2020. API provided by <a className=\"ticketmaster\" href=\"https://developer.ticketmaster.com/products-and-docs/apis/getting-started/\">Ticketmaster</a></p>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, {Component} from 'react';\n// import Header from './Header';\nimport { scroller } from 'react-scroll';\nimport Preloader from './Preloader';\nimport Results from './Components/Results';\nimport Footer from './Components/Footer';\t\nimport axios from 'axios';\nimport './App.scss';\n\n/*\n\nThings to do: \n1. Add a preloader \n2. Compress Img\n5. Make photo sizes the same size \n\n*/\n\nclass App extends Component {\n\nconstructor() {\nconsole.log('constructor');\nsuper ();\n\nthis.state = {\n\t\tfilteredGenreResult: [],\n\t\tmusicGenreResults: [],\n\t\tgenreSelection: \"\",\n\t\tselectedGenreTitle: \"\",\n\t\tuserSelectedEvent: false,\n\t\tisLoading: false,\n\t}\n}\n\ncomponentDidMount() {\n\n}\n\n\n//THIS SELECT BUTTON IS USED FOR changing the genre, making sure we get a value from switching genre!\nhandleSelectGenreChange = (event) => {\n\tconsole.log(event.target.selectedOptions[0].text);\n\t\n\tthis.setState ({\n\t\tgenreSelection: event.target.value,\n\t\tselectedGenreTitle: event.target.selectedOptions[0].text, //the state needs to be updated to the new genre selection state\n\t})\n}\n\n//prevent form default and this is targeted towards the BUTTON for submitting genre\n\nhandleFormSubmit = (event) => {\n\tevent.preventDefault();\n\tconsole.log('being clicked');\n\t\n\tconsole.log('componentDidMount');\n\t//create a function that if a user doesn't select anything, prompt a warning\n\n\t// if (this.handleFormSubmit.value === \"\"){\n\t// \talert('please pick something');\n\t// }\n\n\tthis.setState ({\n\t\tisLoading: true,\n\t})\n\n\taxios({\n\t\turl: \"https://app.ticketmaster.com/discovery/v2/events.json\",\n\t\tmethod: \"GET\",\n\t\tdataResponse: \"json\",\n\t\tparams: {\n\t\t\tapikey: \"MWm7x4F8toW2nr8tUwIiGndgapxXqsxE\",\n\t\t\tformat: 'json',\n\t\t\tcity: 'toronto',\n\t\t\tsort: 'date,asc', \n\t\t\tclassificationName: 'music',\n\t\t\tgenreId: this.state.genreSelection,\n\t\t}\n\t\t}).then((response) => {\n\t\t\tresponse = response.data._embedded.events; //narrows down api call and saves as a variable\n\t\t\tconsole.log(response);\n\n\t\t\tthis.setState({\n\t\t\t\tevent: response,\n\t\t\t\tuserSelectedEvent:true,\n\t\t\t\tisLoading: false,\n\t\t\t})\n\n\t\t\tscroller.scrollTo('main', { //this will auto scroll to the main after submitting a genre\n\t\t\t\tsmooth: true,\n\t\t\t\tduration: 500,\n\t\t\t});\n\t\t});\n\n\t// create conditionals when a genre has been selected\n}\n\n// button to scroll back to top when being clicked, because its outside of state. don't need to put this.state\n\nscrollToTop = () => {\n\tconsole.log('being clicked');\n\tscroller.scrollTo('header', {\n\t\tsmooth: true,\n\t\tduration: 700,\n\t});\n}\n\n\n\trender () {\n\n\tconsole.log('render');\n\tconsole.log(this.state.event);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t{/* <Header /> */}\n\t\t\t\t<div className=\"hero\" id=\"header\">\n\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={require(\"./assets/blackWhite-logo.png\")}\n\t\t\t\t\t\tclassName=\"logo\"\n\t\t\t\t\t\talt=\"Music T.O. Event Logo\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<form action=\"\" className=\"form\">\n\t\t\t\t\t\t<label htmlFor=\"whichGenre\"></label>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"whichGenre\"\n\t\t\t\t\t\t\tid=\"whichGenre\"\n\t\t\t\t\t\t\tclassName=\"selectBtn\"\n\t\t\t\t\t\t\tonChange={this.handleSelectGenreChange}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value=\"\">Choose a Genre</option>\n\t\t\t\t\t\t\t<option value=\"KnvZfZ7vAeA\">Rock</option>\n\t\t\t\t\t\t\t<option value=\"KnvZfZ7vAvF\">EDM</option>\n\t\t\t\t\t\t\t<option value=\"KnvZfZ7vAee\">R&B</option>\n\t\t\t\t\t\t\t<option value=\"KnvZfZ7vAv1\">Rap</option>\n\t\t\t\t\t\t\t<option value=\"KnvZfZ7vAvE\">Jazz</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"startBtn\"\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tonClick={this.handleFormSubmit}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\tT.O. the Event\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t{this.state.isLoading ? <Preloader />: null}\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\t// return (\n\t\t\t\t\t// \t{this.state.isLoading ? <p>is Loading</p> : null}\n\t\t\t\t\tthis.state.event === undefined ? null : \n\t\t\t\t\t<Results\n\t\t\t\t\t\tevent={this.state.event}\n\t\t\t\t\t\tgenreTitle={this.state.selectedGenreTitle}\n\t\t\t\t\t\tuserSelectedEvent={this.state.userSelectedEvent}\n\t\t\t\t\t\tscrollToTop={this.scrollToTop}\n\t\t\t\t\t\t/> \n\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n/* \n\nPSEUDO CODE\n\n0. Mount the component \n1. User selects a genre\n2. when genre is selected, axios call is made\n3. through api call, filter out results to the specific and put in states\n4. create\n\n*/\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}