{"version":3,"sources":["assets/blackWhite-logo.png","Components/Preloader.js","Components/Results.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Preloader","className","Results","id","this","props","genreTitle","userSelectedEvent","event","map","key","name","_embedded","venues","dates","start","localDate","localTime","src","images","url","alt","target","href","onClick","scrollToTop","Component","Footer","App","handleSelectGenreChange","setState","genreSelection","value","selectedGenreTitle","selectedOptions","text","handleFormSubmit","preventDefault","isLoading","axios","method","dataResponse","params","apikey","format","city","sort","classificationName","genreId","state","then","response","data","events","scroller","scrollTo","smooth","duration","require","action","htmlFor","onChange","type","undefined","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.517901d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blackWhite-logo.f1f414da.png\";","import React from 'react';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"preloaderContainer\">\r\n            <h2>Fetching Events</h2>\r\n            <span>\r\n                <i className=\"preloader fas fa-music\"></i>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React, {Component} from 'react';\r\n\r\n\r\nclass Results extends Component {\r\n\r\nrender() {\r\n\treturn (\r\n\t\t<main id=\"main\">\r\n\t\t<div className=\"genreBackground\">\r\n\t\t\t<h2 className=\"genreTitle\">{this.props.genreTitle === \"\" ? \"Random Genre\" : `ðŸŽµ T.O. ${this.props.genreTitle} ResultsðŸŽµ`}</h2>\r\n\t\t</div>\r\n\t\t\t<ul className=\"flexContainer wrapper\">\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.userSelectedEvent ? this.props.event.map(event => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<li key={event.id}className=\"resultContainer\">\r\n\t\t\t\t\t\t\t\t<h2 className=\"eventTitle\">{event.name}</h2>\r\n\t\t\t\t\t\t\t\t<h3 className=\"eventVenue\">{event._embedded.venues[0].name}</h3>\r\n\t\t\t\t\t\t\t\t<h3 className=\"eventDate\">{event.dates.start.localDate}</h3>\r\n\t\t\t\t\t\t\t\t<h3 className=\"eventTime\">{event.dates.start.localTime}</h3>\r\n\t\t\t\t\t\t\t\t<div className=\"imgContainer\">\r\n\t\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\tclassName=\"eventImg\"\r\n\t\t\t\t\t\t\t\t\tsrc={event.images[4].url}\r\n\t\t\t\t\t\t\t\t\talt={event.name}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<a className=\"ticketLink\" target=\"_blank\" href={event.url}>Buy Tickets</a>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t);\t\r\n\t\t\t\t\t}) : null \r\n\t\t\t\t}\r\n\t\t\t</ul>\r\n\t\t\t<button className=\"scrollToTopBtn\" onClick={this.props.scrollToTop}>\r\n\t\t\t\t<i className=\"far fa-arrow-alt-circle-up\"></i>\r\n\t\t\t\t<p>scroll to top</p>\r\n\t\t\t</button>\r\n\t\t</main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Results;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className = \"footer wrapper\">\r\n                <p>Created by Brandon Tang. Juno College 2020. API provided by <a className=\"ticketmaster\" href=\"https://developer.ticketmaster.com/products-and-docs/apis/getting-started/\">Ticketmaster</a></p>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, {Component} from 'react';\nimport { scroller } from 'react-scroll';\nimport Preloader from './Components/Preloader';\nimport Results from './Components/Results';\nimport Footer from './Components/Footer';\t\nimport axios from 'axios';\nimport './App.scss';\n\nclass App extends Component {\n\nconstructor() {\n\tsuper ();\n\n\tthis.state = {\n\t\tgenreSelection: \"\",\n\t\tselectedGenreTitle: \"\",\n\t\tuserSelectedEvent: false,\n\t\tisLoading: false,\n\t}\n}\n\n//THIS SELECT BUTTON IS USED FOR changing the genre, making sure we get a value from switching genre!\nhandleSelectGenreChange = (event) => {\n\tthis.setState ({\n\t\tgenreSelection: event.target.value,\n\t\tselectedGenreTitle: event.target.selectedOptions[0].text, //the state needs to be updated to the new genre selection state\n\t})\n}\n\n\n//prevent form default and this is targeted towards the BUTTON for submitting genre selection\nhandleFormSubmit = (event) => {\n\tevent.preventDefault();\n\t\n\tthis.setState ({\n\t\tisLoading: true,\n\t})\n\n\taxios({ // axios call happens on button submit, set specific parameters to narrow down the api call\n\t\turl: \"https://app.ticketmaster.com/discovery/v2/events.json\",\n\t\tmethod: \"GET\",\n\t\tdataResponse: \"json\",\n\t\tparams: {\n\t\t\tapikey: \"MWm7x4F8toW2nr8tUwIiGndgapxXqsxE\",\n\t\t\tformat: 'json',\n\t\t\tcity: 'toronto',\n\t\t\tsort: 'date,asc', \n\t\t\tclassificationName: 'music',\n\t\t\tgenreId: this.state.genreSelection, //refers to the option id of each genre\n\t\t}\n\t}).then((response) => {\n\t\tresponse = response.data._embedded.events; //\n\n\t\tthis.setState({\n\t\t\tevent: response,\n\t\t\tuserSelectedEvent:true,\n\t\t\tisLoading: false,\n\t\t})\n\n\t\tscroller.scrollTo('main', { //this will auto scroll to the main after submitting a genre\n\t\t\tsmooth: true,\n\t\t\tduration: 500,\n\t\t});\n\t});\n}\n\n// button to scroll back to top when being clicked, because its outside of state. don't need to put this.state\n\nscrollToTop = () => {\n\tscroller.scrollTo('header', {\n\t\tsmooth: true,\n\t\tduration: 700,\n\t});\n}\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"hero\" id=\"header\">\n\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={require(\"./assets/blackWhite-logo.png\")}\n\t\t\t\t\t\tclassName=\"logo\"\n\t\t\t\t\t\talt=\"Music T.O. Event Logo\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<form action=\"\" className=\"form\">\n\t\t\t\t\t\t<label htmlFor=\"whichGenre\"></label>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\tname=\"whichGenre\"\n\t\t\t\t\t\tid=\"whichGenre\"\n\t\t\t\t\t\tclassName=\"selectBtn\"\n\t\t\t\t\t\tonChange={this.handleSelectGenreChange}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\">Choose a Genre</option>\n\t\t\t\t\t\t<option value=\"KnvZfZ7vAeA\">Rock</option>\n\t\t\t\t\t\t<option value=\"KnvZfZ7vAvF\">EDM</option>\n\t\t\t\t\t\t<option value=\"KnvZfZ7vAee\">R&B</option>\n\t\t\t\t\t\t<option value=\"KnvZfZ7vAv1\">Rap</option>\n\t\t\t\t\t\t<option value=\"KnvZfZ7vAvE\">Jazz</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"startBtn\"\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tonClick={this.handleFormSubmit}\n\t\t\t\t\t\t>\n\t\t\t\t\t\tT.O. the Event\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t\t{this.state.isLoading ? <Preloader /> : null}\n\t\t\t\t\t</div>\n\t\t\t\t{this.state.event === undefined ? null : (\n\t\t\t\t<Results\n\t\t\t\t\tevent={this.state.event}\n\t\t\t\t\tgenreTitle={this.state.selectedGenreTitle}\n\t\t\t\t\tuserSelectedEvent={this.state.userSelectedEvent}\n\t\t\t\t\tscrollToTop={this.scrollToTop}\n\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<Footer />\n\t\t\t</div>\n    \t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}